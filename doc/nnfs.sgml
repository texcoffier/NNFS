<!DOCTYPE RefEntry PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
<!ENTITY nnfs "<Command>nnfs2</Command>">
<!ENTITY medium "<Emphasis>NNFS medium</Emphasis>">
<!ENTITY fs "<Emphasis>NNFS filesystem</Emphasis>">
<!ENTITY % paper-type "A4">
]>


<RefEntry>

<DocInfo>
    <address>
      <email>exco@ligim.univ-lyon1.fr</email>
    </address>
    <author>
      <firstname>Thierry</firstname>
      <surname>EXCOFFIER</surname>
    </author>
<Date>2003 march 2</Date>
</DocInfo>


<RefMeta>
<RefEntryTitle>nnfs2</RefEntryTitle>
<ManVolNum>1</ManVolNum>
</RefMeta>

<RefNameDiv>
<RefName>nnfs2</RefName>
<RefPurpose>Synchronise filesystems between Non-Networked hosts</RefPurpose>
</RefNameDiv>

<RefSynopsisDiv>

<CmdSynopsis>
<Command>nnfs2</command>
<Arg Choice=Req> <Option>--no-x11</Option></Arg>
<Group>
<Arg><Option>--add-first <Replaceable/directory-name/</Option></Arg>
<Arg><Option>--add <Replaceable/directory-name/</Option></Arg>
<Arg><Option>--add-nickname <Replaceable/directory-name/</Option></Arg>
</Group>
</CmdSynopsis>

<CmdSynopsis>
<Command/nnfs2/
<Group>
<Arg><Option>--help</Option></Arg>
<Arg><Option>--licence</Option></Arg>
</Group>
</CmdSynopsis>

</RefSynopsisDiv>


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
<RefSect1>
<Title>INTRODUCTION</Title>
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

<Para>
The NNFS goal is to provide to ``one'' user a consistent file system
over all the hosts used by the user.
</Para>

<Para>
With hosts connected on a LAN you must use NFS instead of NNFS.
In the case of hosts not connected by a network or
connected by a slow network (modem) NFS is not the answer.
</Para>

<Para>
With NNFS, the files are duplicated on all the computers.
The up to date files are on the computer on which the user works.
The &fs; is stored on the &medium;.
Usually the &medium; is a floppy disk,
it could be whatever you want (easily customisable),
if there is much data, several floppies will be asked.
</Para>

<Para>
When the user stops his work on a computer,
he runs as last command: &nnfs;.
Then all his modifications (change, creation, deletion)
are recorded on the &medium;.
</Para>

<Para>
When the user starts to work on a computer,
he runs as first command: &nnfs;.
Then all modifications (change, creation, deletion)
stored on the &medium; are retrieved on current system.
</Para>

<Para>
If the user forgot to run an update, &nnfs; will nevertheless optimally work.
The only drawback is that some files will not be up to date on
the host used by the user.
</Para>

<Para>
It is also possible to have a numbered backup 
of modified/deleted files.
So you cannot lose a file when you run &nnfs;
(because the file is modified/deleted on another host)
</Para>

</RefSect1>




<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
<RefSect1>
<Title>USAGE</Title>
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

<Para>&nnfs; has a text and a graphical user interface.
If you run the command for the first time or with a &medium;
formatted or not, the command will provide contextual informations and help
and will ask contextual questions.
The graphical user interface allows you to edit the configuration.
</Para>

<Para>The interactive help is extensive and guide the user.
This documentation is here to give general principles.
</Para>

<Para>By default the &nnfs; works with standards tools: floppy disk
and <Command>gzip</Command>. The floppy disk access is done
<FOREIGNPHRASE>via</FOREIGNPHRASE> system dependent commands
(IRIX, AIX, HPUX and <Command>mcopy</Command> in the other cases).
If you want to change these defaults, see the configuration section.
</Para>

<Para>As the default configurations use floppy disk, the &nnfs;
default filter does not synchronise big files or ``garbage'' files.
If you want to change these defaults, see the configuration section.
</Para>

<para>It is not recommended to continue to modify files while &nnfs;
is running. It is not dangerous but the result is unpredictable.
</para>

<para>Be carefull, some applications wrote their data on disk only
when you stop them. So you must stop these applications before
running &nnfs;. For example <command>netscape</command> wrote
some folder information only when you quit the program, so you
must run &nnfs; only if <command>netscape</command> is not running.
To avoid this you can create a shell script killing these applications
and cleaning some file before launching &nnfs;.
</para>

<!-- ********************************************************************** -->
<RefSect2>
<Title>To do before using &nnfs;</Title>
<!-- ********************************************************************** -->

<Para>
If the file hierarchy you want to synchronise is yet identical
on all the hosts you can go to the next section.
The root of the file hierarchy may have a different name on each host.
To avoid problems you should use only relative internal symbolic links,
so the links are correct on all the hosts.
</Para>
<Para>
If the files hierarchy are not identical, you have two solutions:
<Itemizedlist>
<Listitem><Para>You create yourself an identical hierarchy on all the hosts.
<Emphasis>The file modification date should be identical on all the
hosts.</Emphasis></Para>
</listitem>
<Listitem><Para>Or, you let &nnfs; create the identical hierarchy on all
the hosts. In this case, a hierarchy made of the union of all the
files is created, conflicts are solved using the modification date.
It is the only case where the modification date is used to solve conflicts.
</Para>
</listitem>
</Itemizedlist>


</Para>
</RefSect2>


<!-- ********************************************************************** -->
<RefSect2>
<Title>Initialisations</Title>
<!-- ********************************************************************** -->

<Para>
When you run the &nnfs; command on an host not known by the &fs;
it will explain you how to add the host in the &fs;.
</Para>

<para>
If the &fs; does not fit in one medium, you will be asked
to introduce medium.
</para>

<Para>
Now, the initialisation for 2 hosts named A and B will be detailed
for the 2 user interfaces.
</Para>

<RefSect3>
<Title>Initialisations with X11 interface</Title>

<para>First run on host A.
<Itemizedlist>
<listitem><para>You click on: <GUIBUTTON>Continue without reading the medium</GUIBUTTON></para></listitem>
<listitem><para>you enter the local name of the hierarchy to synchronise,</para></listitem>
<listitem><para>you click on: <GUIBUTTON>Continue the update</GUIBUTTON>,</para></listitem>
<listitem><para>you click on: <GUIBUTTON>Medium AAA is ready for writing</GUIBUTTON>,</para></listitem>
<listitem><para>you click on: <GUIBUTTON>Quit</GUIBUTTON></para></listitem>
</Itemizedlist>
</para>

<para>Second run on host B, assuming medium is ready.
<Itemizedlist>
<listitem><para>You click on: <GUIBUTTON>Continue the update</GUIBUTTON></para></listitem>
<listitem><para>you enter the local name of the hierarchy to synchronise,</para></listitem>
<listitem><para>you click on: <GUIBUTTON>Continue the update</GUIBUTTON>,</para></listitem>
<listitem><para>you click on: <GUIBUTTON>Quit</GUIBUTTON></para></listitem>
</Itemizedlist>
</para>



<para>Normal run when initialisations are done, assuming medium is ready.
<Itemizedlist>
<listitem><para>You click on: <GUIBUTTON>Continue the update</GUIBUTTON></para></listitem>
<listitem><para>you click on: <GUIBUTTON>Continue the update</GUIBUTTON>,</para></listitem>
<listitem><para>you click on: <GUIBUTTON>Quit</GUIBUTTON></para></listitem>
</Itemizedlist>
</para>

</RefSect3>








<RefSect3>
<Title>Initialisations with text interface</Title>

<para>First run on host A.
<Itemizedlist>
<listitem><para>You type: &nnfs; <option>--add-first</option> <replaceable>dirname</replaceable></para></listitem>
<listitem><para>You answer: <keycap>c</keycap> <keycap>return</keycap> to continue the update</para></listitem>
<listitem><para>You hit : <keycap>return</keycap> when medium is ready</para></listitem>
</Itemizedlist>
</para>

<para>Second run on host B, assuming medium is ready.
<Itemizedlist>
<listitem><para>You type: &nnfs; <option>--add</option> <replaceable>dirname</replaceable></para></listitem>
<listitem><para>You answer: <keycap>c</keycap> <keycap>return</keycap> to continue the update</para></listitem>
</Itemizedlist>
</para>



<para>Normal run when initialisations are done, assuming medium is ready.
<Itemizedlist>
<listitem><para>You type: &nnfs;</para></listitem>
<listitem><para>You answer: <keycap>c</keycap> <keycap>return</keycap> to continue the update</para></listitem>
</Itemizedlist>
</para>

</RefSect3>




</RefSect2>





<!-- ********************************************************************** -->
<RefSect2>
<Title>How to recover from &medium; read failure</Title>
<!-- ********************************************************************** -->

<para>If there is a read error you can rerun &nnfs; a few times with the
hope that the error will vanish. If it is not the case, put the
bad medium in a trash, take a new one and create immediately
a new &fs; with the current host.</para>

<Para>
If the read error is before you start to work on an host.
Try to not work on non-synchronized file in order to avoid future
conflicts. Run &nnfs; as always before stopping to work on the host.
</Para>

<para>
If the read error is before you leave an host. You will want to copy
the file modified by your session on the other host. To do so,
modify all the file you want to synchronise and rerun &nnfs; on the host.
For example by running <command>find . -mtime -1 -print | xargs touch</command>.
If you do not do this, these files will be synchronised but only
after adding the other host on &fs;, a run on local the host and a run on the other
host.
</para>

<para>My experience about floppies is that there is floppies usable
only 2 or 3 times and some usable hundreds of time.
<emphasis>Even if they are from the same box</emphasis>.</para>


</RefSect2>





<!-- ********************************************************************** -->
<RefSect2>
<Title>Historised backups</Title>
<!-- ********************************************************************** -->
<Para>
Each time you run &nnfs; the files deleted or modified are
moved in a directory. This directory is not mirrored!
<example>
<title>Archiving modified files in default directory</title>
<para>
Current date: Sun Sep 16 14:57:47 CEST 2001
</para>
<para>
Modified file: <filename>foo/bar/Makefile</filename>
</para>
<para>
Historised file: <filename>.nnfs/history/2001_09/16_14:57.47/foo/bar/Makefile</filename>
</para>

</example>
</Para>
<para>
So you can easily remove old historised files by date.
</para>


</RefSect2>





<!-- ********************************************************************** -->
<RefSect2>
<Title>Conflicts</Title>
<!-- ********************************************************************** -->
<Para>
If you don't run &nnfs; before and after working, some update conflicts
may be raised if you work on the same files.
<example>
<title>A simple conflict</title>
<Itemizedlist>
<listitem><para>You run &nnfs; on host A</para></listitem>
<listitem><para>You modify <filename>foo</filename> on host A</para></listitem>
<listitem><para>You run &nnfs; on host A</para></listitem>
<listitem><para>You modify <filename>foo</filename> on host B</para></listitem>
<listitem><para>You run &nnfs; on host B (you should have done this before modifying the file)</para></listitem>
</Itemizedlist>
</example>
</para>

<para>
The conflict solving method is straightforward, the remote conflicting file
is always copied on local host. If you don't agree, you can
retrieve the local file content from the <filename>.nnfs/history</filename>
directory.
</para>
<para>
This method is not used to solve conflict when adding a new host.
In this case, the most recent file is copied over the old ones
</para>


</RefSect2>



</RefSect1>


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
<RefSect1>
<Title>ADVANCED USAGE</Title>
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

<!-- ********************************************************************** -->
<RefSect2>
<Title>Alias</Title>
<!-- ********************************************************************** -->
<Para>
If you run &nnfs; on several hosts using <Acronym>NFS</Acronym>,
you must indicate to &nnfs; that the hosts use the same file system.
<emphasis>The mirrored directory must have the same name on all aliased host</emphasis>
</Para>


<para>
Assuming that the medium is ready, adding an alias with X11 interface.
<Itemizedlist>
<listitem><para>You click on: <GUIBUTTON>Continue the update</GUIBUTTON></para></listitem>
<listitem><para>you click on: <GUIBUTTON>+Nickname</GUIBUTTON>,</para></listitem>
<listitem><para>You click on: <GUIBUTTON>Continue the update</GUIBUTTON></para></listitem>
<listitem><para>you click on: <GUIBUTTON>Quit</GUIBUTTON></para></listitem>
</Itemizedlist>
</para>

<para>
Assuming that the medium is ready, adding an alias with text interface.
<Itemizedlist>
<listitem><para>You type: &nnfs; <option>--add-nickname</option> <replaceable>hostname-yet-known-by-nnfs</replaceable></para></listitem>
<listitem><para>You answer: <keycap>c</keycap> <keycap>return</keycap> to continue the update</para></listitem>
</Itemizedlist>
</para>


</RefSect2>

<!-- ********************************************************************** -->
<RefSect2>
<Title>Configuration</Title>
<!-- ********************************************************************** -->
<Para>
The configuration file is <filename>.nnfs/nnfsrc</filename>,
it is created the first time you run &nnfs;.
It is a hugely commented shell script you can edit.
It is a shell script to allow some default values
to be computed from the system.
</Para>
<Para>
If you find this configuration file too complex to edit,
you can use the &nnfs; X11 interface to edit the file.
There is many tips to help you configure.
</Para>
<Para>
The more useful options are :
<Itemizedlist>
<listitem><para><envar>READ_MEDIUM</envar> shell script called by &nnfs; to read from the medium</para></listitem>
<listitem><para><envar>WRITE_MEDIUM</envar> shell script called by &nnfs; to write on the medium</para></listitem>
<listitem><para><envar>COMPRESS_FILTER</envar> shell script filter called by &nnfs; to compress</para></listitem>
<listitem><para><envar>UNCOMPRESS_FILTER</envar> shell script filter called by &nnfs; to uncompress</para></listitem>
<listitem><para><envar>MEDIUM_SIZE</envar> size of the medium in bytes, if the medium if bigger than 2Gb the data will be splitted in multiple files AAA AAB ...</para></listitem>
<listitem><para><envar>OUTPUT_FILTER</envar> indicate which files should not be mirrored</para></listitem>
<listitem><para><envar>CONFIRMATION</envar> choose which questions &nnfs; will ask you</para></listitem>
<listitem><para><envar>AUTO_START</envar> if true, &nnfs; X11 interface start update without user intervention.</para></listitem>
<listitem><para><envar>TMP_FILE</envar> set this to <literal>none</literal> if you use &nnfs; with a big medium</para></listitem>
<listitem><para><envar>CROSS_MOUNT_POINT</envar> if true &nnfs; will synchronise all the files even if they are on several file systems. The default is false so the mount points are not crossed.</para></listitem>
<listitem><para><envar>COPY_HARD_LINK</envar> if true &nnfs; will copy hard links as several files not hard linked, this is dangerous because an update can break the link, so the default is false and the hard linked files are not copied at all.</para></listitem>
<listitem><para><envar>MODE_CHANGE_SENSITIVE</envar> if true &nnfs; will copy the file even if only the mode change. If false the file will not be synchronized, but if it is, its mode will be synchronized. The default is true in order to have a perfect synchronization of the mode.</para></listitem>
</Itemizedlist>
</Para>
<Para>
The option hard to configure is <envar>OUTPUT_FILTER</envar>.
The default value is fine for me but certainly not for you.
The minimal filter must stop the copy of &nnfs; history and all backup files.
</Para>
<Example>
<title>Required minimal filter</title>
<screen>-regex=~$
-regex=^\.nnfs/history/
</screen>
</Example>
<Para>
But, to run &nnfs; you must be connected, and the connection
modify some file you don't want to copy on other hosts
because it is a security breach or it is a non-sense.
For example, any dot file in connection directory
ending by <literal>history</literal> or <literal>authority</literal> 
</Para>
<Example>
<title>Filter files modified by the connection</title>
<screen>-regex=^\.[^/]*(history|authority)$
</screen>
</Example>
<Para>
If the medium is small, you need to filter the files that are
garbage as <literal>core</literal>, the executable files
or the results of compilation as <literal>.o</literal> files.
I assume here that executables biggers than 50k are not scripts
shell or perl.
</Para>
<Example>
<title>Filter garbage files</title>
<screen>-type=f size=+50k perm=+111
-regex=(\.(o|a|so|sl|aux|log|dvi|summary|old)|/(core|a\.out))$
</screen>
</Example>

<Para>
The big shell or perl script are filtered, if you don't want
this. Tell &nnfs; to not filter them.
</Para>
<Example>
<title>Do not filter scripts (notice the <literal>+</literal> on line start)</title>
<screen>+regex=\.(pl|sh|tcl)$
+regex=/configure$
</screen>
</Example>

<RefSect3>
<title>Reference of the filter description</title>
<para>Each line starts by <literal>-</literal> or <literal>+</literal>,
to remove or add to the file set the files verifying all the conditions
in the line.
</para>
<para>
The conditions are:
<Itemizedlist>
<listitem><para><literal>perm=+</literal><replaceable>xxxx</replaceable>:
The condition is verified if any bit indicated in octal are in the
file mode. If you indicate <literal>0111</literal> the file mode  <literal>0100</literal>,  <literal>0111</literal>,  <literal>0750</literal> are
verified.</para></listitem>
<listitem><para><literal>perm=-</literal><replaceable>xxxx</replaceable>:
The condition is verified if all the bits indicated in octal are in
the file mode. If you indicate <literal>0111</literal> the file mode <literal>0755</literal> is verified but
not <literal>0750</literal>.</para></listitem>
<listitem><para><literal>perm=</literal><replaceable>xxxx</replaceable>:
The condition is verified if the file mode is exactly equal to the
value indicated in octal.</para></listitem>
<listitem><para><literal>size=+</literal><replaceable>xxxx</replaceable>:
The condition is verified if the file size if bigger than the size
specified. A size in kilo-bytes may be specified as
<literal>56k</literal> and in mega-bytes as <literal>2m</literal></para></listitem>
<listitem><para><literal>size=-</literal><replaceable>xxxx</replaceable>:
same as above, but the file size must be smaller. The two conditions
may appear on the same line.</para></listitem>
<listitem><para><literal>type=</literal><replaceable>dflp</replaceable>:
The type is regular file (<literal>f</literal>), directory
(<literal>d</literal>), FIFO (<literal>p</literal>) or symbolic link (<literal>l</literal>)</para></listitem>
<listitem><para><literal>regex=</literal><replaceable>aregularexpression</replaceable>: If you want the expression to match the full name, add <literal>^</literal> at the begin and  <literal>$</literal> at the end.
This condition must be at the end of the line.</para></listitem>
</Itemizedlist>
</para>

</RefSect3>



</RefSect2>

<!-- ********************************************************************** -->
<RefSect2>
<Title>Synchronisation of <acronym>UID</acronym> and <acronym>GID</acronym></Title>
<!-- ********************************************************************** -->
<Para>
If you want to synchonise the files with there <acronym>UID</acronym>
and <acronym>GID</acronym> you need to be <literal>root</literal> and to run
the <command>rootnnfs2</command>.
</Para>


</RefSect2>




</RefSect1>

<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
<RefSect1>
<Title>FILES</Title>
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->



<VARIABLELIST>

<VARLISTENTRY>
<TERM><filename>~/.nnfs/nnfsrc</filename></TERM>
<LISTITEM><PARA>&nnfs; configuration</PARA></LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM><filename>~/.nnfs/gtkrc</filename></TERM>
<LISTITEM><PARA>&nnfs; GTK configuration</PARA></LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM><filename>~/.nnfs/history</filename></TERM>
<LISTITEM><PARA>Directory where modified or deleted files are saved</PARA></LISTITEM>
</VARLISTENTRY>

<VARLISTENTRY>
<TERM><filename>~/.nnfs/log~</filename></TERM>
<LISTITEM><PARA>Some log about &nnfs; last work</PARA></LISTITEM>
</VARLISTENTRY>

</VARIABLELIST>

</RefSect1>



<!-- ********************************************************************** -->
<RefSect1>
<Title>BUGS</Title>
<!-- ********************************************************************** -->
<Para>
Limitations:
<Itemizedlist>
<listitem><para>Directories must contains less than 16777216 files (need to recompile).</para></listitem>
<listitem><para>Less than 128 hosts to synchronise (need to recompile).</para></listitem>
<listitem><para>No mirroring of 000 mode file (it is more a feature than a bug).</para></listitem>
<listitem><para>No mirroring of hard links (will not be corrected).</para></listitem>
<listitem><para>A file may be not mirrored if it is modified in the
 same second that &nnfs; modify it (will not be corrected).</para></listitem>
<listitem><para>If A, B  and C are 3 hosts, B filter some files.
	  &nnfs; runs on A, B, C,  A, B, C,  A, B, C,  A, B, C,   ...
	  The modified files on A are filtered by B and are not copied on C.
(very difficult to correct)</para></listitem>
<listitem><para>When adding an host to &nnfs;, symbolics links are copied because
the &medium; doesn't contain the content of the link.
The real problem is that you can't create a symbolic link
with all the good attributes (modification time, mode and on some systems <acronym>UID</acronym>
and <acronym>GID</acronym>). So it is impossible to fully mirror symbolic links</para></listitem>
<listitem><para>In <filename>g_file.h</filename> should use <literal>off_t</literal> in place of <literal>long</literal> but it doesn't compile on IRIX MIPS IP30 gcc. So files are limited to 2GB.</para></listitem>
<listitem><para> On Mac OS X the symbolic links are often copied because the
file system does not store modification date
of symbolic links.</para></listitem>
<listitem><para> On Mac OS X &nnfs; is unpredictable if only the case is different between two file names as with <literal>README</literal> and <literal>Readme</literal></para></listitem>
</Itemizedlist>
</para>
<para>
Bugs:
<Itemizedlist>
<listitem><para> In some cases, the GTK progress bar go over 100%.</para></listitem>
</Itemizedlist>
</Para>
</RefSect1>

<!-- ********************************************************************** -->
<RefSect1>
<Title>NO WARRANTY</Title>
<!-- ********************************************************************** -->
<para>
<emphasis>
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
</emphasis>
</para>

<Para>
It is nearly impossible that &nnfs; do an irrecoverable error.
In the worst case, &nnfs; will stop.
The returned value (error) of all the system calls are verified and
the program tries to analyse the error.
</para>

<Para>
The parameters of the more stressing test on &nnfs; are the following:
<Itemizedlist>
<listitem><para> 4 hosts</para></listitem>
<listitem><para> On each host a program create/delete/modify file/links/directories
  at the maximum speed.</para></listitem>
<listitem><para>&nnfs; runs continuously on each of the host randomly.
  So, while &nnfs; runs, files are modified while it is reading/writing them.
  Or worstly, directories are deleted while &nnfs; analyse the content,
  or files are created in directories that &nnfs; tries to delete</para></listitem>
</Itemizedlist>
Incredibly, &nnfs; works in this case thousands of time
on a Linux 386 Debian host.
</Para>
<Para>&nnfs; had been compiled and tested on HPPA 1.1 HPUX 10.20 and MIPS IP30 IRIX 6.5</Para>
<Para>On Mac OS X it does not work optimaly with symbolic links (see BUGS).</Para>
</RefSect1>


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
<RefSect1>
<Title>SEE ALSO</Title>
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

<SimpleList>

<Member>
<CiteRefEntry>
<RefEntryTitle><Command>gzip</command></RefEntryTitle>
<ManVolNum/1/</CiteRefEntry>
</Member>

<Member>
<CiteRefEntry>
<RefEntryTitle><Command>mcopy</command></RefEntryTitle>
<ManVolNum/1/</CiteRefEntry>
</Member>

</SimpleList>


</RefSect1>


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->
<RefSect1>
<Title>AUTHOR</Title>
<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

<para>
Author:
    <author>
      <firstname>Thierry</firstname>
      <surname>EXCOFFIER</surname>
    </author>,
Author Home Page:
<ULINK URL="http://perso.univ-lyon1.fr/thierry.excoffier/" TYPE="alternate">http://perso.univ-lyon1.fr/thierry.excoffier/</ULINK>
</para>
<para>
&nnfs; home page: <ULINK URL="http://perso.univ-lyon1.fr/thierry.excoffier/nnfs.html" TYPE="alternate">http://perso.univ-lyon1.fr/thierry.excoffier/nnfs.html</ULINK>

</para>



</RefEntry>
